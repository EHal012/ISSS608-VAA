---
title: "Take-home Ex02"
description: "Take-home Ex02" 
date: "May 16, 2025" 
date-modified: "May 16, 2025" 
format: html
author: "YUAN Yihao" 
editor: visual 
execute: 
  eval: true 
  echo: true 
  warning: false 
  freeze: true 
---



```{r}
pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)
```

```{r}
kg <- fromJSON("data/MC1_release/MC1_graph.json")
```

###inspect structure
```{r}
str(kg, max.level = 1)
```

### Extract and inspect

```{r}
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links) 
```

## Initial EDA

```{r}
ggplot(data = edges_tbl,
       aes(y = `Edge Type`)) +
       geom_bar()
```

## Creating Knowledge Graph

```{r}
ggplot(data = nodes_tbl,
       aes(y = `Node Type`)) +
  geom_bar()
```


### Step 1 : Mapping from node is to row index
```{r}
id_map <- tibble(id = nodes_tbl$id,
                 index = seq_len(
                   nrow(nodes_tbl)))
```

This ensures each id from your node list is mapped to the correct row number

### Step 2: Map source and target IDS to row indices

```{r}
edges_tbl <- edges_tbl %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)
```


```{r}
edges_tbl <- edges_tbl %>%
  filter(!is.na(from), !is.na(to))
```

###Step 4: Creating the graph

Lastly, `tbl_graph()` is used to create tiidygraph's graph object by using the code chunk below

```{r}
graph <- tbl_graph(nodes = nodes_tbl, 
                   edges = edges_tbl, 
                   directed = kg$directed)
```

##Visualising the knowledge graph

```{r}
set.seed(1234)
```

###Visualising the whole Graph

```{r}
#| eval: false
ggraph(graph, layout = "fr") +
  geom_edge_link(alpha = 0.3,
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`),
                  size = 4) +
  geom_node_text(aes(label = name),
                 repel = TRUE,
                 size = 2.5) +
  theme_void()
```

#### Step 1" Filter edges to only "Memberof"

```{r}
graph_memberof <- graph %>%
  activate(edges) %>%
  filter(`Edge Type` == "MemberOf")
```

####Step 2: Extract only connected nodes

```{r}
used_node_indices <- graph_memberof %>%
  activate(edges) %>%
  as_tibble()%>%
  select(from, to) %>%
  unlist() %>%
  unique()
```


####Step4: keep only those nodes

```{r}
graph_memberof <- graph_memberof
  